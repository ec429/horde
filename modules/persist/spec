persist: simple persistence server

For many applications, a full relational database is overkill; all you really want is a persistent store, performance needn't be very high (especially write-performance), and writes are infrequent enough that their locking need not be very fine-grained.

persist is intended to fulfil this requirement; each file will consist of conses storing your data as trees.  From the outside, the store consists of names bound to values which may be primitives (like strings or numbers) or lists.

Since lists may have lists as their elements, persist's data model is in fact fully recursive.  It is also dynamically typed; there is no way to specify "this list is a list of numbers".  Unlike a relational database, you cannot impose constraints like PRIMARY KEY or NOT NULL, nor does persist perform selects and joins and so on for you - you have to retrieve the list you want and loop over it.  Consequently, if you require such operations, and want the system to be scalable, you should use a real RDBMS.

Requests might be something like one of the following:
	(persist (file mydb.per) (append) (name Thesaurus) \["big" "great" "gigantic" "massive"\])
		Appends ("big" "great" "gigantic" "massive") to the list Thesaurus
	(persist (file mydb.per) (lookup) (name Thesaurus[0][3]))
		Returns (cadddr (car Thesaurus))
	(persist (file mydb.per) (insert) (name Thesaurus[0][1]) "large")
		Inserts "large" into (car Thesaurus), between its car and its cadr
	(persist (file mydb.per) (delete) (name Thesaurus[0][3]))
		Deletes (cadddr (car Thesaurus))
	(persist (file mydb.per) (replace) (name Thesaurus[0][2]) "huge")
		Replaces (caddr (car Thesaurus)) with "huge"
After all five of these, assuming Thesaurus started out empty, it will contain (("big" "large" "huge" "massive")).
In fact it won't be quite like that, since (probably, anyway) you won't be able to pass a list as data, so the first request (the append) would have to be split into four appends to Thesaurus[0].

Internal Representation:
Each value starts with a byte identifying its type (high nibble) and containing flags (low nibble).  All integers are stored big-endian.
CONS
	0X car[4] cdr[4]
	X=flags
	The car and cdr are offsets within the file.
UINT8
	8X byte[1]
UINT16
	9X word[2]
UINT32
	AX dword[4]
BYTEARRAY
	BX length[4] bytes[length]
CSTRING
	CX asciz-string-data[]
FLOAT
	FX single[4]
	single is in IEEE 754-2008 binary32 format, in network byte order (so the sign bit is the msb of the first byte)
The file starts with two addresses (offsets): the head of the free list, and the head of the names list.  Each entry on the free list is a cons whose car points to the start of the free block, and whose cdr is the length of the block.  Entries with length 0 may exist, but will be garbage-collected from time to time.  Each entry on the names list is a cons whose car points to the object to which the name refers, and whose cdr points to a CSTRING storing the name.
